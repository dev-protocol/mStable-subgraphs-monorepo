#!/usr/bin/env ts-node

const fs = require('fs')
const path = require('path')
const { argv } = require('yargs').options({
  template: {
    type: 'string',
    demandOption: true,
    describe: 'template.graphql file (input)',
  },
  schema: {
    type: 'string',
    demandOption: true,
    describe: 'schema.graphql file (output)',
  },
})

const IMPORT_PATTERN = /^# import (.+)$/

const main = async () => {
  const { template, schema } = argv

  const graphqlPath = path.join(
    path.dirname(require.main.filename),
    '../graphql',
  )
  const templatePath = path.join(path.resolve('.'), template)
  const schemaPath = path.join(path.resolve('.'), schema)

  const templateFile: string = await fs.promises.readFile(templatePath, 'utf-8')

  const [imports, definitions] = templateFile
    .split('\n')
    .reduce<[string[], string]>(
      ([_imports, _contents], line) => {
        const match = line.match(IMPORT_PATTERN)?.[1]
        return match
          ? [_imports.concat(match), _contents]
          : [_imports, _contents.concat('\n', line)]
      },
      [[], ''],
    )

  const importedFiles: string[] = await Promise.all(
    imports.map(async importName => {
      const importPath = path.join(graphqlPath, `${importName}.graphql`)
      return fs.promises.readFile(importPath, 'utf-8')
    }),
  )

  const importedDefinitions = importedFiles
    .map(file => file.trim())
    .join('\n\n')

  const merged = [
    '### This file is automatically generated ###',
    '######## BEGIN IMPORTED DEFINITIONS ########',
    importedDefinitions,
    '######### END IMPORTED DEFINITIONS #########',
    definitions,
  ].join('\n\n')

  return fs.promises.writeFile(schemaPath, merged)
}

main()
  .then(() => {
    process.exit(0)
  })
  .catch(error => {
    console.log(error)
    process.exit(1)
  })
