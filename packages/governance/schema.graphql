# import Metric
# import Counter
# import Token
# import Transaction

type UserLockup @entity {
  # incentivisedVotingLockup + account
  id: ID!

  account: Bytes!

  incentivisedVotingLockup: IncentivisedVotingLockup!

  value: BigInt!

  lockTime: BigInt!

  ts: BigInt!

  slope: BigInt!

  bias: BigInt!

  ejected: Boolean!

  ejectedHash: Bytes
}

type IncentivisedVotingLockup @entity {
  id: ID!

  userLockups: [UserLockup!]! @derivedFrom(field: "incentivisedVotingLockup")

  stakingRewards: [StakingReward!]!
    @derivedFrom(field: "incentivisedVotingLockup")

  stakingBalances: [StakingBalance!]!
    @derivedFrom(field: "incentivisedVotingLockup")

  votingToken: Token!

  end: BigInt!

  periodFinish: Int!

  lastUpdateTime: Int!

  stakingToken: Token!

  rewardPerTokenStored: BigInt!

  duration: BigInt!

  rewardRate: BigInt!

  rewardsToken: Token!

  rewardsDistributor: RewardsDistributor!

  globalEpoch: BigInt!

  expired: Boolean!

  maxTime: BigInt!

  totalStaticWeight: BigInt!

  totalStakingRewards: BigInt!

  totalValue: BigInt!

  totalStakers: Counter!
}

type RewardsDistributor @entity {
  id: ID!

  fundManagers: [Bytes!]!
}

type StakingReward @entity {
  # contract + account
  id: ID!

  amount: BigInt!

  rewardsPaid: BigInt!

  amountPerTokenPaid: BigInt!

  account: Bytes!

  incentivisedVotingLockup: IncentivisedVotingLockup!
}

type StakingBalance @entity {
  # incentivisedVotingLockup + account
  id: ID!

  account: Bytes!

  incentivisedVotingLockup: IncentivisedVotingLockup!

  amount: BigInt!
}

enum LockAction {
  CREATE_LOCK
  INCREASE_LOCK_AMOUNT
  INCREASE_LOCK_TIME
}

type WithdrawTransaction implements Transaction @entity {
  id: ID!
  block: Int!
  hash: Bytes!
  provider: Bytes!
  sender: Bytes!
  timestamp: BigInt!
  value: BigInt!
}

type EjectTransaction implements Transaction @entity {
  id: ID!
  block: Int!
  ejected: Bytes!
  ejector: Bytes!
  hash: Bytes!
  sender: Bytes!
  timestamp: BigInt!
}

type ClaimTransaction implements Transaction @entity {
  id: ID!
  block: Int!
  hash: Bytes!
  reward: BigInt!
  sender: Bytes!
  timestamp: BigInt!
  user: Bytes!
}

type CreateLockTransaction implements Transaction @entity {
  id: ID!
  block: Int!
  hash: Bytes!
  lockTime: BigInt!
  provider: Bytes!
  sender: Bytes!
  timestamp: BigInt!
  value: BigInt!
}

type IncreaseLockAmountTransaction implements Transaction @entity {
  id: ID!
  block: Int!
  hash: Bytes!
  provider: Bytes!
  sender: Bytes!
  timestamp: BigInt!
  value: BigInt!
}

type IncreaseLockTimeTransaction implements Transaction @entity {
  id: ID!
  block: Int!
  hash: Bytes!
  lockTime: BigInt!
  provider: Bytes!
  sender: Bytes!
  timestamp: BigInt!
}
