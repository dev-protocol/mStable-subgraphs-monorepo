/* eslint-disable */

const fs = require('fs')
const path = require('path')
const chalk = require('chalk')
const { argv } = require('yargs').options({
    input: {
        type: 'array',
        demandOption: true,
        describe: 'Input .graphql filenames',
    },
    pkg: {
        type: 'string',
        demandOption: true,
        describe: 'Package name',
    },
})

const main = async () => {
    const { input, pkg } = argv
    console.log(input)
    await Promise.all(
        input.flatMap(async (filename) => {
            const inputPath = path.join('../graphql', `${filename}.graphql`)

            const allFilePaths = await fs.promises.readdir(inputPath, {
                withFileTypes: true,
            })

            const gqlPaths = allFilePaths.filter(({ name }) => {
                return name.endsWith('graphql')
            })

            const gqlFiles = await Promise.all(
                gqlPaths.map(({ name }) => {
                    return fs.promises.readFile(path.join(inputPath, name), 'utf-8')
                }),
            )

            const outputPath = path.join(pkg, 'generated.graphql')

            const mergedFiles = gqlFiles
                .map((file, index) => `# Imported from ${gqlPaths[index].name}\n\n${file}`)
                .join('\n\n')

            const contents = `# This file is automatically generated.\n\n${mergedFiles}`

            console.log(outputPath);
            console.log(contents);
            // return fs.promises.writeFile(outputPath, contents)
        }),
    )
}

main()
    .then(() => {
        process.exit(0)
    })
    .catch((error) => {
        console.log(error)
        process.exit(1)
    })
